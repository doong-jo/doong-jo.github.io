{"version":3,"file":"component---src-pages-posts-write-html-the-html-way-not-the-xhtml-way-mdx-55a6319217651f77ecf6.js","mappings":"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","sources":["webpack://blog/./node_modules/@babel/runtime/helpers/esm/defineProperty.js","webpack://blog/./node_modules/@mdx-js/react/lib/index.js","webpack://blog/./src/pages/posts/write-html-the-html-way-not-the-xhtml-way.mdx"],"sourcesContent":["export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import _defineProperty from \"/Users/sungdong.jo/repos/blog/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\n/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode} [children]\n *   Children.\n *\n * @callback MergeComponents\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\nimport React from 'react';\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\n\nexport var MDXContext = React.createContext({});\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\n\nexport function withMDXComponents(Component) {\n  return boundMDXComponent;\n  /**\n   * @param {Record<string, unknown> & {components?: Components}} props\n   * @returns {JSX.Element}\n   */\n\n  function boundMDXComponent(props) {\n    var allComponents = useMDXComponents(props.components);\n    return React.createElement(Component, _objectSpread(_objectSpread({}, props), {}, {\n      allComponents: allComponents\n    }));\n  }\n}\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components|MergeComponents} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\n\nexport function useMDXComponents(components) {\n  var contextComponents = React.useContext(MDXContext); // Memoize to avoid unnecessary top-level context changes\n\n  return React.useMemo(function () {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents);\n    }\n\n    return _objectSpread(_objectSpread({}, contextComponents), components);\n  }, [contextComponents, components]);\n}\n/** @type {Components} */\n\nvar emptyObject = {};\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\n\nexport function MDXProvider(_ref) {\n  var components = _ref.components,\n      children = _ref.children,\n      disableParentContext = _ref.disableParentContext;\n  var allComponents = useMDXComponents(components);\n\n  if (disableParentContext) {\n    allComponents = components || emptyObject;\n  }\n\n  return React.createElement(MDXContext.Provider, {\n    value: allComponents\n  }, children);\n}","/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    blockquote: \"blockquote\",\n    p: \"p\",\n    h2: \"h2\",\n    a: \"a\",\n    ul: \"ul\",\n    li: \"li\",\n    code: \"code\",\n    pre: \"pre\",\n    ol: \"ol\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"XHTML 방식이 아닌 HTML을 HTML의 방식으로 작성하세요.\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"원문: https://css-tricks.com/write-html-the-html-way-not-the-xhtml-way/\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"여러분은 XHTML을 (더 이상) 사용하지 않을 것이지만, HTML을 작성할 때 생각보다 XHTML의 영향을 많이 받을 수 있습니다. 여러분은 XHTML 방식으로 HTML을 작성하고 있을 수 있습니다.\"), \"\\n\", React.createElement(_components.p, null, \"HTML을 XHTML 방식으로 작성하는 것은 무엇이며, HTML을 HTML 방식으로 작성하는 방식은 무엇일까요? 함께 알아봅시다.\"), \"\\n\", React.createElement(_components.h2, null, \"HTML, XHTML, HTML\"), \"\\n\", React.createElement(_components.p, null, \"1990년대에는 HTML이 있었습니다. 2000년대에는 XHTML이 있었고, 2010년대에는 HTML로 다시 돌아왔습니다. 간단한 이야기입니다.\"), \"\\n\", React.createElement(_components.p, null, \"또한 사양의 대략적인 날짜로도 알 수 있습니다. (HTML “1” 1992, HTML 2.0 1995, HTML 3.2 1997, HTML 4.01 1999; XHTML 1.0 2000, XHTML 1.1 2001; “HTML5” \", React.createElement(_components.a, {\n    href: \"https://en.wikipedia.org/wiki/HTML5#Timeline\"\n  }, \"2007\"), \").\"), \"\\n\", React.createElement(_components.p, null, \"XHTML은 XML과 XML에서 파생된 것들이 미래라고 모두가 믿었을 때 인기를 끌었었습니다. \\\"XML이 전부 였습니다.\\\" 우리가 XHTML 방식으로 HTML을 작성하는 것을 배웠다는 사실로, HTML에게 많은 영향을 끼쳤다는 것을 알 수 있습니다.\"), \"\\n\", React.createElement(_components.h2, null, \"HTML을 작성하는 XHTML 방식\"), \"\\n\", React.createElement(_components.p, null, \"XHTML 방식은 문서화가 매우 잘되어있습니다. \", React.createElement(_components.a, {\n    href: \"https://www.w3.org/TR/xhtml1/#diffs\"\n  }, \"“HTML4와의 차이”\"), \"에서 XHTML 1.0에 대해 자세하게 설명하고 있습니다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"문서들은 잘 형식화 되어 있어야 합니다.\"), \"\\n\", React.createElement(_components.li, null, \"요소 및 속성 이름은 소문자이어야 합니다.\"), \"\\n\", React.createElement(_components.li, null, \"비어 있지 않은 요소의 경우 끝 태그가 필요합니다.\"), \"\\n\", React.createElement(_components.li, null, \"속성의 값은 항상 따옴표로 묶어야 합니다.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://www.w3.org/TR/xhtml1/#h-4.5\"\n  }, \"속성 최적화\"), \"는 지원되지 않습니다.\"), \"\\n\", React.createElement(_components.li, null, \"빈 요소는 닫아야 합니다.\"), \"\\n\", React.createElement(_components.li, null, \"속성 값의 공백 처리는 XML에 따라 수행됩니다.\"), \"\\n\", React.createElement(_components.li, null, \"스크립트 및 스타일 요소에는 CDATA 섹션이 필요합니다.\"), \"\\n\", React.createElement(_components.li, null, \"SGML 제외를 사용할 수 없습니다.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"a\"), \", \", React.createElement(_components.code, null, \"applet\"), \", \", React.createElement(_components.code, null, \"form\"), \", \", React.createElement(_components.code, null, \"frame\"), \", \", React.createElement(_components.code, null, \"iframe\"), \", \", React.createElement(_components.code, null, \"img\"), \" 및 \", React.createElement(_components.code, null, \"map\"), \"과 같은 \", React.createElement(_components.code, null, \"id\"), \" 및 \", React.createElement(_components.code, null, \"name\"), \" 속성을 가진 요소에는 \", React.createElement(_components.code, null, \"id\"), \"만 사용해야 합니다.\"), \"\\n\", React.createElement(_components.li, null, \"미리 정의된 값 집합이 있는 속성은 대소문자를 구분합니다.\"), \"\\n\", React.createElement(_components.li, null, \"16진수 값으로 참조하는 엔티티는 소문자여야 합니다.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"위 내용이 익숙하게 보이나요? CDATA 콘텐츠 표시는 물론 SGML 제외 사항을 처리하는 것을 제외하면 다음과 같은 모든 규칙을 따를 수 있습니다. 전부요.\"), \"\\n\", React.createElement(_components.p, null, \"비록 XHTML은 죽었지만, 이러한 규칙들 중 많은 것들이 다시 반문되어지진 않았습니다. 일부는 HTML을 위한 \\\"모범 사례\\\"로 격상되기도 했습니다.\"), \"\\n\", React.createElement(_components.p, null, \"이 내용들이 HTML을 XHTML 방식으로 작성하는 방법이고, 지속적으로 이 분야에 영향을 미치고 있습니다.\"), \"\\n\", React.createElement(_components.h2, null, \"HTML을 작성하는 HTML 방식\"), \"\\n\", React.createElement(_components.p, null, \"우리를 되돌리는 한 가지 방법은 XHTML에 의해 만들어진 규칙들을 부정하는 것입니다. (HTML이 \", React.createElement(_components.a, {\n    href: \"https://html.spec.whatwg.org/multipage/parsing.html#parsing\"\n  }, \"더 이상 SGML을 기반으로 하지 않으므로\"), \" SGML은 제외) 자세한 내용은 아래와 같습니다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"문서의 형식이 올바르지 않을 수도 있습니다.\"), \"\\n\", React.createElement(_components.li, null, \"요소 및 속성은 소문자가 아닐 수도 있습니다.\"), \"\\n\", React.createElement(_components.li, null, \"비어 있지 않은 요소의 경우 끝 태그가 항상 필요한 것은 아닙니다.\"), \"\\n\", React.createElement(_components.li, null, \"속성 값이 항상 따옴표로 묶이는 것은 아닙니다.\"), \"\\n\", React.createElement(_components.li, null, \"특성 최소화가 지원됩니다.\"), \"\\n\", React.createElement(_components.li, null, \"빈 요소는 닫을 필요가 없습니다.\"), \"\\n\", React.createElement(_components.li, null, \"속성 값의 공백처리가 XML에 따라 수행되지 않습니다.\"), \"\\n\", React.createElement(_components.li, null, \"스크립트 및 스타일 요소에는 CDATA 섹션이 필요하지 않습니다.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"id\"), \" 및 \", React.createElement(_components.code, null, \"name\"), \" 속성이 있는 요소는 \", React.createElement(_components.code, null, \"id\"), \"만 사용하지 않아도 됩니다.\"), \"\\n\", React.createElement(_components.li, null, \"미리 정의된 값 집합이 있는 속성은 대소문자를 구별하지 않습니다.\"), \"\\n\", React.createElement(_components.li, null, \"16진수 값으로 참조하는 엔티티는 소문자만 사용하지 않을 수 있습니다.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"난해한 것들, 관련이 없어 보이는 것들을 제거해 봅시다. 여기에는 XML 공백 처리, CDATA 섹션, 이름 속성 값 중복, 사전 정의된 값 집합의 경우 및 16진수 엔티티 참조가 포함됩니다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"문서의 형식이 올바르지 않을 수도 있습니다.\"), \"\\n\", React.createElement(_components.li, null, \"요소 및 속성은 소문자가 아닐 수도 있습니다.\"), \"\\n\", React.createElement(_components.li, null, \"비어 있지 않은 요소의 경우 끝 태그가 항상 필요한 것은 아닙니다.\"), \"\\n\", React.createElement(_components.li, null, \"속성 값이 항상 따옴표로 묶이는 것은 아닙니다.\"), \"\\n\", React.createElement(_components.li, null, \"특성 최소화가 지원됩니다.\"), \"\\n\", React.createElement(_components.li, null, \"빈 요소는 닫을 필요가 없습니다.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"이러한 규칙에서 벗어나면 XML로 작업하는 것 보다 HTML로 작업하는 것에 가깝습니다. 하지만 아직 끝나지 않았습니다.\"), \"\\n\", React.createElement(_components.p, null, \"“문서의 형식이 올바르지 않을 수도 있습니다.”는 HTML 코드가 유효하지 않아도 괜찮다는 것을 암시합니다. XHTML의 엄격한 오류 처리로 인해 XHTML이 올바른 형식을 가지게 되는 것은 좋은 점이었습니다. 그러나 HTML 문서는 심각한 구문 및 올바른 형식에 대한 문제가 발생해도 동작합니다. 좀 더 전문적으로 사용하는 경우에 이러한 탄력적인 기능을 사용하고 남용하는 것은 유용하지 않습니다. (저는 이전에 \", React.createElement(_components.a, {\n    href: \"https://meiert.com/en/blog/critical-frontend-development/\"\n  }, \"“프론트엔드 개발에 대한 비판적 방어”\"), \"라는 글에서 이 사례를 논의한 적이 있습니다.)\"), \"\\n\", React.createElement(_components.p, null, \"따라서 HTML 방식은 “문서의 형식이 올바르지 않을 수도 있습니다.”는 것을 제안하지 않을 것입니다. 또한 끝 태그 뿐만 아니라 시작 태그도 항상 필요한 것은 아닙니다. 구문을 재정비하고 재정렬 하는 것이 핵심입니다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"시작 및 끝 태그가 항상 필요한 것은 아닙니다.\"), \"\\n\", React.createElement(_components.li, null, \"빈 요소는 닫을 필요가 없습니다.\"), \"\\n\", React.createElement(_components.li, null, \"요소 및 속성 이름은 소문자 또는 대문자일 수 있습니다.\"), \"\\n\", React.createElement(_components.li, null, \"속성 값이 항상 따옴표로 묶이는 것은 아닙니다.\"), \"\\n\", React.createElement(_components.li, null, \"특성 최소화가 지원됩니다.\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, null, \"예제\"), \"\\n\", React.createElement(_components.p, null, \"실제로 이것은 사례에선 어떻게 작성되나요? 시작 태그와 끝 태그의 경우 \", React.createElement(_components.a, {\n    href: \"https://meiert.com/en/blog/optional-html/#toc-tags\"\n  }, \"많은 태그들\"), \"은 선택 사항입니다. 예를 들어 XHTML에서는 다음과 같이 단락과 목록이 작성됩니다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-html\"\n  }, \"<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\\n<ul>\\n  <li>Praesent augue nisl</li>\\n  <li>Lobortis nec bibendum ut</li>\\n  <li>Dictum ac quam</li>\\n</ul>\\n\")), \"\\n\", React.createElement(_components.p, null, \"하지만 HTML에서는 이 코드로도 작성할 수 있습니다. (유효한 코드입니다)\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-html\"\n  }, \"<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.\\n<ul>\\n  <li>Praesent augue nisl\\n  <li>Lobortis nec bibendum ut\\n  <li>Dictum ac quam\\n</ul>\\n\")), \"\\n\", React.createElement(_components.p, null, \"개발자들은 빈 요소들을 작성할 때 이렇게 작성하라고 배웠었습니다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-html\"\n  }, \"<br />\\n\")), \"\\n\", React.createElement(_components.p, null, \"이것은 XHTML이 HTML로 가져온 것이지만, \", React.createElement(_components.a, {\n    href: \"https://html.spec.whatwg.org/multipage/syntax.html#start-tags\"\n  }, \"슬래시가 void 요소에 영향을 미치지 않기\"), \" 때문에, 여러분은 아래처럼 해도 됩니다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-html\"\n  }, \"<br>\\n\")), \"\\n\", React.createElement(_components.p, null, \"HTML에서는 모든 내용을 대문자로 쓸 수도 있습니다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-html\"\n  }, \"<a href=\\\"https://css-tricks.com/\\\">CSS-Tricks</a>\\n\")), \"\\n\", React.createElement(_components.p, null, \"이것은 여러분을 소리를 지르게 만들며 마음에 들지 않게할 수도 있지만, 이렇게 작성해도 괜찮습니다.\"), \"\\n\", React.createElement(_components.p, null, \"이 링크를 압축시키고 싶다면, HTML에서 \", React.createElement(_components.a, {\n    href: \"https://meiert.com/en/blog/optional-html/#toc-quotes\"\n  }, \"특정 따옴표를 생략\"), \"할 수 있는 옵션을 제공합니다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-html\"\n  }, \"<A HREF=https://css-tricks.com/>CSS-Tricks</A>\\n\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"일반적으로 속성 값에 공백이나 등호가 포함되지 않은 경우 따옴표를 삭제해도 됩니다.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"마지막으로, XHTML-HTML이 아닌 HTML-HTML은 속성을 최소화할 수 있습니다. 즉, 입력 요소를 필수 및 읽기 전용으로 표시하는 대신 다음과 같이 합니다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-html\"\n  }, \"<input type=\\\"text\\\" required=\\\"required\\\" readonly=\\\"readonly\\\" />\\n\")), \"\\n\", React.createElement(_components.p, null, \"속성을 최소화할 수 있습니다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-html\"\n  }, \"<input type=\\\"text\\\" required readonly />\\n\")), \"\\n\", React.createElement(_components.p, null, \"따옴표가 필요하지 않다는 사실뿐만 아니라 \", React.createElement(_components.code, null, \"text\"), \"가 여기서 \", React.createElement(_components.code, null, \"type\"), \" 속성에 대한 기본값(더 많은 \", React.createElement(_components.a, {\n    href: \"https://meiert.com/en/blog/optional-html/#toc-values\"\n  }, \"불필요한 속성-값 조합\"), \"이라는 사실을 활용하는 경우 HTML의 미니멀한 아름다움에 대한 예를 볼 수 있습니다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-html\"\n  }, \"<input required readonly />\\n\")), \"\\n\", React.createElement(_components.h2, null, \"HTML을 HTML 방식대로 작성하세요.\"), \"\\n\", React.createElement(_components.p, null, \"위의 내용은 HTML이 90년대에는 어디에 있었는지를 말하고자 하는 것이 아닙니다. 그 당시 HTML은 레이아웃을 위한 \", React.createElement(_components.code, null, \"<table>\"), \" 요소들로 구성되어 있었고, 표현을 위한 코드들로 채워져 있었으며, 매우 다양한 사용자 에이전트 지원으로 인해 대부분 유효하지 않았습니다(\", React.createElement(_components.a, {\n    href: \"https://meiert.com/en/blog/valid-html-2021/\"\n  }, \"현재도 여전히 그렇습니다\"), \"). 그러나 XML과 XHTML이 등장하지 않았더라면 우리가 유지하고자 했던 것의 본질을 말합니다.\"), \"\\n\", React.createElement(_components.p, null, \"좀 더 포괄적이고 현대적인 HTML 작성 방법이 어떤 것인지 제안해 주시면 감사하겠습니다. (HTML은 제가 주요하게 집중하고 있는 영역입니다. 그래서 제 글들 중 일부에 대한 링크를 통해 이 내용을 보충합니다.)\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"구문과 시맨틱을 준수합니다.\"), \"\\n\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://meiert.com/en/blog/the-frontend-developer-test/\"\n  }, \"HTML을 검증\"), \"하고 유효한 HTML을 제공합니다.\"), \"\\n\"), \"\\n\", React.createElement(_components.ol, {\n    start: \"2\"\n  }, \"\\n\", React.createElement(_components.li, null, \"HTML이 제공하는 옵션을 일관성 있게 사용합니다.\"), \"\\n\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"요소 및 속성 이름은 소문자 또는 대문자일 수 있다는 것을 기억하세요.\"), \"\\n\"), \"\\n\", React.createElement(_components.ol, {\n    start: \"3\"\n  }, \"\\n\", React.createElement(_components.li, null, \"HTML 사용을 가장 최소로 유지하세요.\"), \"\\n\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"표현하거나 동작과 관련된 마크업은 CSS와 자바스크립트에 의해 처리하는 것으로 대체된다는 것을 기억하세요.\"), \"\\n\", React.createElement(_components.li, null, \"시작 및 끝 태그는 \", React.createElement(_components.a, {\n    href: \"https://meiert.com/en/blog/optional-html/#toc-tags\"\n  }, \"항상 필요하지는 않다\"), \"는 것을 기억하세요.\"), \"\\n\", React.createElement(_components.li, null, \"빈 요소는 닫을 필요가 없다는 것을 기억하세요.\"), \"\\n\", React.createElement(_components.li, null, \"일부 속성은 \", React.createElement(_components.a, {\n    href: \"https://meiert.com/en/blog/optional-html/#toc-values-values\"\n  }, \"속성-값 쌍을 생략할 수 있는 기본값\"), \"을 허용한다는 것을 기억하세요.\"), \"\\n\", React.createElement(_components.li, null, \"속성 값들은 \", React.createElement(_components.a, {\n    href: \"https://meiert.com/en/blog/optional-html/#toc-quotes\"\n  }, \"항상 따옴표로 묶이지 않아도 된다는 것\"), \"을 기억하세요.\"), \"\\n\", React.createElement(_components.li, null, \"속성 최소화가 지원된다는 것을 기억하세요.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"이것이 \", React.createElement(_components.a, {\n    href: \"https://meiert.com/en/blog/rules-for-html/\"\n  }, \"HTML을 위한 세 가지 기본 규칙\"), \"과 유사하다는 것은 우연이 아니며, \", React.createElement(_components.a, {\n    href: \"https://meiert.com/en/blog/html-performance/\"\n  }, \"더 작은 페이로드가 더 빠른 사이트로 이어진다\"), \"는 전제 하에 있으며, \", React.createElement(_components.a, {\n    href: \"https://meiert.com/en/blog/minimal-web-development/\"\n  }, \"최소한의 웹 개발\"), \"의 내용을 따르고 있습니다. 이 모든 것이 새로운 것은 아닙니다. 우리 분야는 그저 그것을 재발견하는 것을 결정할 수 있을 뿐입니다. 툴링도 사용할 수 있습니다. \", React.createElement(_components.a, {\n    href: \"https://github.com/kangax/html-minifier\"\n  }, \"html-minifier\"), \"는 아마도 가장 저명하며 모든 HTML 최적화를 처리할 수 있을 것입니다.\"), \"\\n\", React.createElement(_components.p, null, \"여러분은 HTML을 XHTML 방식으로 배웠습니다. HTML은 XHTML이 아닙니다. HTML을 재발견하고, HTML을 인식하는 새로운 현대적 작성 방법을 형성하는데 도움을 준다는 것은 인정합니다. 하지만 HTML은 반드시 XML에 기반 하는 것은 아닙니다.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread","target","i","arguments","length","source","forEach","getOwnPropertyDescriptors","defineProperties","MDXContext","useMDXComponents","components","contextComponents","_createMdxContent","props","_components","assign","h1","blockquote","p","h2","a","ul","li","code","pre","ol","_provideComponents","React","href","className","start","MDXLayout","wrapper"],"sourceRoot":""}
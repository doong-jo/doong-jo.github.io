{"version":3,"file":"component---src-pages-posts-front-end-testing-strategy-mdx-cb8e452210ecd117a4de.js","mappings":"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","sources":["webpack://blog/./src/pages/posts/front-end_testing_strategy.mdx","webpack://blog/./src/components/page-layout.js","webpack://blog/./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/sungdong.jo/repos/blog/src/components/page-layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1>{`프론트엔드 테스팅 전략`}</h1>\n    <blockquote>\n      <p parentName=\"blockquote\">{`원문: `}<a parentName=\"p\" {...{\n          \"href\": \"https://itnext.io/front-end-testing-strategy-5fddfd463feb\"\n        }}>{`https://itnext.io/front-end-testing-strategy-5fddfd463feb`}</a></p>\n    </blockquote>\n    <blockquote>\n      <p parentName=\"blockquote\">{`트레이드오프: 트레이드오프(trade-off, tradeoff) 또는 상충 관계는 다른 측면에서 이득을 얻으면서 ... 잃어버리는 일이 수반되는 상황적 결정이다. 즉, 하나가 증가하면 다른 하나는 무조건 감소한다는 것을 뜻한다. (`}<a parentName=\"p\" {...{\n          \"href\": \"https://ko.wikipedia.org/wiki/%ED%8A%B8%EB%A0%88%EC%9D%B4%EB%93%9C%EC%98%A4%ED%94%84\"\n        }}>{`위키백과`}</a>{`)`}</p>\n      <p parentName=\"blockquote\">{`Mock: 모의 객체(Mock Object)란 주로 ... 실제 사용하는 모듈을 사용하지 않고 실제의 모듈을 \"흉내\"내는 \"가짜\" 모듈을 작성하여 테스트의 효용성을 높이는데 사용하는 객체이다. (`}<a parentName=\"p\" {...{\n          \"href\": \"https://ko.wikipedia.org/wiki/%EB%AA%A8%EC%9D%98_%EA%B0%9D%EC%B2%B4\"\n        }}>{`위키백과`}</a>{`)`}</p>\n      <p parentName=\"blockquote\">{`human error: 사람의 실수로 만들어지는 오류 (`}<a parentName=\"p\" {...{\n          \"href\": \"https://en.wikipedia.org/wiki/Human_error\"\n        }}>{`위키백과`}</a>{`)`}</p>\n    </blockquote>\n    <p>{`다양한 테스트 레이어를 정의하고 현재 상황을 짚어보며 효과적인 전략에 대해 제안합니다.`}</p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"https://miro.medium.com/max/1400/1*PXPDiNKxOAbIR9MtwqQXZg.png\",\n        \"alt\": \"image1.png\"\n      }}></img></p>\n    <p>{`앞서 이 글에서 중점으로 보는 부분은 아래와 같습니다.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`프론트엔드 테스팅만을 중점적으로 합니다 (예: 리액트 어플리케션과 컴포넌트와의 상호작용).`}</li>\n      <li parentName=\"ul\">{`많은 부분을 `}<a parentName=\"li\" {...{\n          \"href\": \"https://medium.com/u/db72389e89d8?source=post_page-----5fddfd463feb--------------------------------\"\n        }}>{`Kent C. Dodds`}</a>{`의 테스팅 원칙을 기반으로 합니다. 그는 리액트 생태계에서 가장 유명한 개발자 중 한명이며 여러 오픈소스 라이브러리(`}<a parentName=\"li\" {...{\n          \"href\": \"https://testing-library.com/)%EB%A5%BC\"\n        }}>{`https://testing-library.com/)를`}</a>{` 만들었고 뿐만 아니라 높은 퀄리티의 교육과정들과 글을 배포하고 있습니다.`}</li>\n    </ul>\n    <h2>{`I) 소개`}</h2>\n    <h3>{`1. 우리는 왜 테스트를 작성해야하는가?`}</h3>\n    <p>{`테스트는 작업하는 흐름의 속도를 높이고 코드 품질을 개선하는 데 도움이 될 수 있지만 테스트를 작성하는 가장 크고 중요한 이유는 `}<strong parentName=\"p\">{`자신감`}</strong>{`입니다.\n여러분이 작성하는 코드가 미래를 대비하면서 앱을 망가뜨리지 않을 것이라는 확신을 원합니다.\n따라서 무엇을 하던지, 여러분은 작성하는 여러 종류의 테스트들이 가능한 한 큰 자신감을 복돋아 줄 수 있게 만들고 싶겠지만 테스팅할 때 만들어지는 트레이드 오프의 대해 인지하는 것도 필요합니다.`}</p>\n    <hr></hr>\n    <p><strong parentName=\"p\">{`Resources:`}</strong></p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://kentcdodds.com/blog/confidently-shipping-code\"\n        }}>{`Kent C. Dodds — Confidently Shipping Code`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://kentcdodds.com/blog/how-to-know-what-to-test\"\n        }}>{`Kent C. Dodds — How to know what to test?`}</a></li>\n    </ul>\n    <hr></hr>\n    <h3>{`2. Types of test`}</h3>\n    <blockquote>\n      <p parentName=\"blockquote\">{`당신은 벽에 페인트를 던져 많은 부분의 벽을 칠할 수 있겠지만 브러시를 들고 벽에 오르지 않으면 모서리는 절대 칠하지 못할 것입니다. 🖌️`}</p>\n    </blockquote>\n    <p>{`이 은유는 테스팅에 관한 내용에도 딱 맞게 적용됩니다. 왜냐하면 기본적으로 여러분이 세울 테스팅 전략을 올바르게 선택하는 것이 벽을 칠할 브러시를 선택할 때와 동일선상에 있기 때문입니다.\n수동 테스팅은 레이어 중 하나입니다. 자동화 테스팅에 대해 이야기 할때는 단위 테스트, 통합 테스트, 종단 간 테스트 (E2E)과 같은 가장 일반적인 것들에 대해 알아봅니다.\n그리고나서 (예를 들어 자바와 같은 다른 어어와 달리)자바스크립트에서는 기본적으로 type이 없으므로 일반적인 정적 도구 툴을 포함합니다(Typescript, Flow, ESLint, …).`}</p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"https://miro.medium.com/max/1400/1*iBBcTAf4zvn7yZq4K4MShA.png\",\n        \"alt\": \"image1\"\n      }}></img></p>\n    <h4>{`정적 테스트`}</h4>\n    <p>{`정적 테스트는 요구되는 실행 가능한 코드없이 수행 가능합니다. 설정이 쉽고 빠르며 어플리에키션을 개발하는 동안 오타 및 타입 에러를 지속적으로 포착할 수 있습니다.\nTypeScript(Typing programming language) 및 ESLint(Linters)는 이러한 유형의 테스트를 수행하는 일반적인 도구입니다.`}</p>\n    <h4>{`단위 테스트`}</h4>\n    <p>{`단위 테스트는 소프트웨어의 작고 독립적인 부분들(또는 원자단위)이 예상대로 작동하는지 확인합니다. 일반적으로 종속성(공동 작업자)이 없거나 테스트를 위해 mocked된 것들에 대해 테스트 합니다.\n`}<inlineCode parentName=\"p\">{`Jest`}</inlineCode>{`는 해당 유형의 테스트를 수행하는 공통 도구입니다.`}</p>\n    <h4>{`통합 테스트`}</h4>\n    <p>{`통합 테스트는 여러 단위(기능, 구성 요소, 클래스 등)의 조합으로 함께 의도한대로 작동하는지 확인합니다. 행동을 전체적으로 테스트하고 가능한 한 적게 mock 하려고합니다. 통합 테스트는 다른 것들과 독립적인 하나의 시스템(예: 프론트엔드)을 다루고 있습니다.`}</p>\n    <p><inlineCode parentName=\"p\">{`Jest`}</inlineCode>{` 는 이 유형을 테스트 하는데 가장 일반적으로 사용되는 도구입니다.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`\"단위 란 무엇인가? vs \"통합은 무엇입니까?\" 코드를 보는 관점에 따라 다릅니다.`}</p>\n      <p parentName=\"blockquote\">{`하나의 드롭다운이 있는 컴포넌트 라이브러리를 사용하는 어플리케이션 예로 들어봅시다.`}</p>\n      <ul parentName=\"blockquote\">\n        <li parentName=\"ul\">{`컴포넌트 라이브러리 관점: Dropdown의 내부의 함수는 단위이며 Dropwodn 전체는 통합입니다.`}</li>\n        <li parentName=\"ul\">{`어플리케이션 관점: Dropdown은 단위가 됩니다. 페이지의 Form은 통합입니다.`}</li>\n      </ul>\n    </blockquote>\n    <h4>{`종단 간 테스트 (E2E)`}</h4>\n    <p>{`E2E 테스트(어떤 때는 \"함수형 테스팅\" 이라고 불리기도 하는) 모든 시스템(Front-end, Back-end, …)을 포함하여 테스트합니다.\n브라우저를 자동화하고 어플리케이션를 통틀어 정형화한 사용자 흐름을 재현하려고합니다. (어플리케이션을 로드하고, 로그인 단계를 거쳐, 페이지와 상호작용, …).\nE2E는 여러분의 소프트웨어의 큰 부분을 보장할 수 있도록 도와줍니다.`}</p>\n    <p><inlineCode parentName=\"p\">{`Cypress`}</inlineCode>{`는 이 유형을 테스트 하는데 가장 일반적으로 사용되는 도구입니다.`}</p>\n    <h4>{`수동 테스트`}</h4>\n    <p>{`수동 테스트는 자동화 된 도구를 사용하지 않고 수행되는 테스트를 제안합니다.`}</p>\n    <p>{`사람이 사용자가 어떤 것을 하는지 정확히 재현합니다.`}</p>\n    <p>{`예시)`}</p>\n    <ol>\n      <li parentName=\"ol\">{`컴퓨터에 앞에 앉는다.`}</li>\n      <li parentName=\"ol\">{`브라우저로 어플리케이션을 연다.`}</li>\n      <li parentName=\"ol\">{`로그인을 한다.`}</li>\n      <li parentName=\"ol\">{`어딘가를 누른다.`}</li>\n    </ol>\n    <p>{`목표는 개발자가 예상하지 못하거나 자동화된 도구에서 감지하지 못한 버그를 잡는 것입니다.`}</p>\n    <hr></hr>\n    <p><strong parentName=\"p\">{`Resources:`}</strong></p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://youtu.be/Da9wfQ0frGA\"\n        }}>{`Kent C. Dodds — What We Can Learn About Testing From The Wheel`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://kentcdodds.com/blog/the-testing-trophy-and-testing-classifications\"\n        }}>{`Kent C. Dodds — The Testing Trophy and Testing Classifications`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://kentcdodds.com/blog/static-vs-unit-vs-integration-vs-e2e-tests\"\n        }}>{`Kent C. Dodds — Static vs Unit vs Integration vs E2E Testing for Frontend Apps`}</a></li>\n    </ul>\n    <hr></hr>\n    <h3>{`3. 어떤 테스트가 가장 큰 자신감을 주는가?`}</h3>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"https://miro.medium.com/max/1194/1*3OXQSU4sjlSO_tCPLYTGkA.png\",\n        \"alt\": \"image2\"\n      }}></img></p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`테스트가 소프트웨어 사용 방식과 유사할수록 더 많은 자신감을 줄 수 있습니다.`}</p>\n    </blockquote>\n    <p>{`테스트를 통해 여러분은 여러분의 소프트웨어가 릴리즈 하였을 때 의도한대로 동작하고 있는지 확인하려 합니다. 이렇게 하려면 최선의 방법은 소프트웨어에 대한 최종 사용자의 관점을 염두에 두고 테스트를 작성하는 것입니다.\n간단한 원칙에 따라 수동 테스트는 최종 사용자가 어플리케이션과 상호작용 하는 것과 가장 유사하기 때문에 최선의 선택지처럼 보입니다. 그러나 소프트웨어를 테스트할 때 규모에 유연한 해결책이 아닙니다.`}</p>\n    <p>{`여러분은 소프트웨어에서 만든 어떠한 변경사항도, 개발환경에서 프로덕션에 배포하기 전에는 아무것도 깨지지 않길 바라겠지만 만약 이것들을 수동 테스트를 한다면 굉장히 오래걸릴겁니다. 덧붙여서 수동 테스트는 많은 human error를 만들게 합니다.\n그렇기 때문에 대안인 더 빠르고, 확장가능하며, human error로 부터 해방되는 자동화 테스트를 선호하는 것입니다. (잘 작성된 경우)`}</p>\n    <hr></hr>\n    <p><strong parentName=\"p\">{`Resources:`}</strong></p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://testing-library.com/docs/guiding-principles/\"\n        }}>{`Testing Library — Guiding Principles`}</a></li>\n    </ul>\n    <hr></hr>\n    <h2>{`II) 트레이드 오프에 대해서 이야기 해봅시다.`}</h2>\n    <h3>{`1. Code coverage`}</h3>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"https://miro.medium.com/max/1006/1*-cKATYalSQgYDNrA6rOfGg.png\",\n        \"alt\": \"image3\"\n      }}></img></p>\n    <p>{`어플리케이션에 대한 100% 코드 커버리지를 의무화하는 것은 좋은 생각이 아닙니다. 코드 커버리지가 특정 숫자를 넘어 증가할 때 테스트로부터 받는 이득이 적어지게 됩니다. (70%로 가정해봅시다)\nYou get diminishing returns on your tests when the coverage increases beyond a certain number (Let’s say 70% for example).\n먄약 애써 많은 시간을 100%를 위해 쓴다면, 여러분은 테스트가 필요하지 않은 것들을 테스팅하는데 많은 시간을 보내고 있는 여러분 자신을 발견하게 됩니다.`}</p>\n    <p>{`테스트가 필요하지 않은 것들:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`전혀 로직이 없는 것들`}</strong>{`: 어떤 버그도 ESLint나 Typescript에 의해 발견될 수 있습니다.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`구현 세부 사항`}</strong>{`: 구현 세부사항은 여러분의 소프트웨어가 잘 동작하고 있을 때 매우 큰 자신감은 주지 않습니다. 그리고 이건 여러분을 리팩토링할 때 느리게 만듭니다(여러분은 동작이 동일하게 유지되므로 코드를 리팩토링 할 때 매우 드문 경우에 테스트를 변경해야할 것입니다).\n이것은 아래 사항으로 도달하게 합니다.`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`거짓 음성: 어플리케이션 코드를 리팩토링할 때 깨질 수 있습니다.`}</li>\n          <li parentName=\"ul\">{`거짓 양성: 어플리케이션 코드가 깨져도 실패하지 않을 수 있습니다.`}</li>\n        </ul>\n      </li>\n    </ul>\n    <blockquote>\n      <p parentName=\"blockquote\">{`거짓 음성: 스팸 메일이 아닌데 스팸 메일이라고 하는 것\n거짓 양성: 스팸 메일인데 스팸 메일이 아니라고 하는 것\n`}<a parentName=\"p\" {...{\n          \"href\": \"https://ko.wikipedia.org/wiki/%EA%B1%B0%EC%A7%93_%EC%96%91%EC%84%B1%EA%B3%BC_%EA%B1%B0%EC%A7%93_%EC%9D%8C%EC%84%B1\"\n        }}>{`위키백과`}</a></p>\n    </blockquote>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`구현 세부 사항을 어떻게 결정하나요?`}</strong></p>\n    </blockquote>\n    <blockquote>\n      <p parentName=\"blockquote\">{`여러분의 테스트가 실제 코드가 사용되지 않는 경우에 대해 무엇인가를 한다면 그것은 세부 구현사항을 테스팅 하는 것 입니다(예를 들면 은닉된 함수를 노출시키는 것).`}</p>\n    </blockquote>\n    <h4>{`Commons coverage에 대한 오해`}</h4>\n    <p>{`Code coverage가 여러분에게 말하는 것:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`이 테스트가 실행될 때 이 코드 라인이 실행되었습니다.`}</li>\n    </ul>\n    <p>{`Code coverage가 여러분에게 말하지 않는 것:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`코드의 이 부분은 비즈니스 요구 사항에 따라 작동합니다.`}</li>\n      <li parentName=\"ul\">{`코드의 이 부분은 어플리케이션의 다른 모든 코드들과 잘 작동합니다.`}</li>\n      <li parentName=\"ul\">{`코드의 이 부분은 다른 부분보다 테스트하는 것이 더 중요합니다.`}</li>\n    </ul>\n    <h4>{`Code Coverage < Use Case Coverage`}</h4>\n    <p>{`You should concern less about the code you are testing and more about the use cases that code supports because :`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Code changes more often than use cases do`}</li>\n      <li parentName=\"ul\">{`The code can be “working” when the use case is broken`}</li>\n    </ul>\n    <hr></hr>\n    <p><strong parentName=\"p\">{`Resources:`}</strong></p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://kentcdodds.com/blog/common-testing-mistakes#mistake-number-2-100-codecoverage\"\n        }}>{`Kent C. Dodds — Common Testing Mistakes`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://youtu.be/_pnW-JjmyXE\"\n        }}>{`Aaron Abramov — Establishing testing patterns with software design principles`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://kentcdodds.com/blog/testing-implementation-details\"\n        }}>{`Kent C. Dodds — Testing Implementation Details`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://kentcdodds.com/blog/avoid-the-test-user\"\n        }}>{`Kent C. Dodds — Avoid the Test User`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://kentcdodds.com/blog/how-to-know-what-to-test#code-coverage--use-case-coverage\"\n        }}>{`Kent C. Dodds — How to know what to test?`}</a></li>\n    </ul>\n    <hr></hr>\n    <h3>{`2. How to know what to test?`}</h3>\n    <p>{`Since you won’t be able to test everything, you will have to decide where you want to focus your effort.`}</p>\n    <h4>{`Testing pyramid`}</h4>\n    <p>{`You may already know the Testing pyramid, which is a popular way to talk about the different layers of testing. The following one is a combination of `}<a parentName=\"p\" {...{\n        \"href\": \"https://martinfowler.com/bliki/TestPyramid.html\"\n      }}>{`Martin Fowler’s blog`}</a>{` and one from the `}<a parentName=\"p\" {...{\n        \"href\": \"https://testing.googleblog.com/2015/04/just-say-no-to-more-end-to-end-tests.html\"\n      }}>{`Google Testing blog`}</a>{` :`}</p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"https://miro.medium.com/max/1400/1*MwuGw31HDIM_q70NsPkcuQ.png\",\n        \"alt\": \"image4\"\n      }}></img></p>\n    <p>{`The size of these forms of testing on the pyramid is relative to the amount of focus you should give them when testing your applications.`}</p>\n    <p>{`Both arrows indicate the trade-off you are making when you move through the pyramid. As you move up the pyramid, the tests get slower to write/run and more expensive (in terms of time and resources) to run/maintain. When you go up, your tests tend to become also more finicky and there are more points to failure.`}</p>\n    <p>{`Following only those two aspects, It’s meant to indicate that you should spend more of your time on unit tests because they are at the same time cheap and fast.`}</p>\n    <p>{`But there are a few problems here :`}</p>\n    <p>{`1 — This pyramid was created in 2012 and based on this assumption (provides from the bottom notes of Martin Fowler’s blog) :`}</p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"https://miro.medium.com/max/1400/1*PcjJ62vDPGPJaMtgVHbv_g.png\",\n        \"alt\": \"image5\"\n      }}></img></p>\n    <p>{`Which is less true now. The testing tools are much better in comparison to what they were before (Better in terms of performance, but also to be able to tell what part of the test has caused the failure as well as describe the problem).`}</p>\n    <p>{`2 — The pyramid was created at a time when the front-end testing ecosystem wasn’t as great as it is now. A decade ago, our tools were not well-equipped for reproducing the front-end end-user.\nMost of the tests, tools, and the pyramid were back-end focused. And the reason is that the back-end is “easier” to test in comparison to testing the front-end. They build software which talks directly to other software (Which can be considered as their users). So it’s natural for them to write tests that would look like the code they want to test.\nFor the front-end, the users could be the end-users, who have fingers, hands and will click around, type some stuff on the keyboard, potentially use some screen readers, etc. It’s a lot more complicated to reproduce their behavior. Fortunately, a lot of things have changed in these recent years, and we have now better tools (Ex: Testing Library) to be able to test our software in the same way that the user would do.`}</p>\n    <p>{`3 — The pyramid does not address Static testing. It’s because it was defined for developers who are using static type languages (Ex: Java, C). But with JavaScript, you have to add external tools (Typescript, Eslint) to get such feedback, so in your reality, it’s one of the layers of testing.`}</p>\n    <p>{`4 — There is one aspect that is left out in this pyramid: As you move up the pyramid, the confidence coefficient of each form of testing increases.`}</p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"https://miro.medium.com/max/1400/1*2WNZBbX_68J-EkIy4nx8ZQ.png\",\n        \"alt\": \"image6\"\n      }}></img></p>\n    <p>{`The confidence coefficient means, the higher you go up the testing pyramid, the closer you are getting to your tests resembling the way that your software is used. And so the confidence that you get from those also goes up.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`For example, if you have a checkout feature, testing the entire process in the same way that a real user would interact with, allows you to cover and ensure that all the sub-elements used work together.`}</p>\n    </blockquote>\n    <p>{`So while E2E tests may be slower and more expensive than unit tests, they bring you much more confidence that your application is working as intended.\nOn the opposite, Units tests are faster and cheaper, but by testing them you might find yourselves:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Testing pieces in isolation (which doesn’t give you confidence that they work properly together)`}</li>\n      <li parentName=\"ul\">{`Testing implementations details`}</li>\n      <li parentName=\"ul\">{`Mocking a lot`}</li>\n    </ul>\n    <p>{`which are many factors that take you away from the principle of “Tests your application in the exact same way that your user would interact with” and so trade away confidence.`}</p>\n    <h4>{`Testing trophy`}</h4>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"https://miro.medium.com/max/1400/1*NkeRL80U-fE3N5YeuIeSHA.png\",\n        \"alt\": \"image7\"\n      }}></img></p>\n    <p>{`With the testing trophy, we keep the same testing stack: `}<strong parentName=\"p\">{`E2E`}</strong>{`, `}<strong parentName=\"p\">{`Integrations`}</strong>{`, and `}<strong parentName=\"p\">{`Unit`}</strong>{`; but you changed the ratio between the different shapes. we also add the `}<strong parentName=\"p\">{`Static`}</strong>{` layer to represent the reality of JavaScript.`}</p>\n    <p><strong parentName=\"p\">{`E2E tests`}</strong>{` are the type of automated testing that gives the most confidence that your software works well as intended. Maybe in the future our E2E tools will just get so much better that you will just focus 100% on it, but today they can still be expensive to write and run. So you are going to focus only on some high-level critical tests which can require the interactions of multiple systems (Front-end, back-ends, …) and represent production data. In E2E you are generally going to assume the happy path and especially avoid over-testing.`}</p>\n    <p><strong parentName=\"p\">{`Integration tests`}</strong>{` are the widest layer of the trophy because it’s where you should focus most of your effort. They strike a great balance on the trade-offs between confidence and speed/expense to write and run your tests. They test some happy paths and unhappy paths. By testing that several parts of your software work well together as intended, you will be able to cover a lot of use cases in the same way that the end-user would interact with it; And you’ll find that you often don’t need to bother testing each smaller piece in isolation.`}</p>\n    <p><strong parentName=\"p\">{`Unit tests`}</strong>{` are the smallest section of the trophy. It’s all about focusing your effort on testing little edge cases, or typically pure functions which have a lot of complex logic. Here you are not testing the business cases (the cases that the end-user will have). The users of your units are typically the other developers which would call your function from a developer’s perspective.`}</p>\n    <p><strong parentName=\"p\">{`Static tests`}</strong>{` should be applied everywhere in the application because they give you a lot of information without even needing to run your application.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`The ratio between each shapes is not 100% accurate, most of the time you would like to have more E2E than Unit tests.`}</p>\n    </blockquote>\n    <hr></hr>\n    <p><strong parentName=\"p\">{`Resources:`}</strong></p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://youtu.be/ahrvE062Kv4\"\n        }}>{`Kent C. Dodds — How to know what to test?`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.software-engineering-unlocked.com/double-down-integration-tests-kent-dodds/\"\n        }}>{`Kent C. Dodds — Why you should double down on integration tests?`}</a></li>\n    </ul>\n    <hr></hr>\n    <h2>{`III) 결론`}</h2>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"https://miro.medium.com/max/1194/1*vqODTN3LTNPhhgcAX9kJcA.png\",\n        \"alt\": \"image7\"\n      }}></img></p>\n    <p>{`This tweet from Guillermo Rauch (CEO and founder of Vercel) is a perfect summary of that testing philosophy :`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Write tests: They give you CONFIDENCE that your software work as intended`}</li>\n      <li parentName=\"ul\">{`Not too many: Do not mandate 100% code coverage. You should think less about the code you are testing and more about the use cases that the code supports.`}</li>\n      <li parentName=\"ul\">{`Mostly integration: They are the best balance on the trade-offs between confidence and speed/expense to write and run your tests.`}</li>\n    </ul>\n    <p>{`It is also important to mention that Manual testing will surely still have a place for decades among the testing strategy. There will always be some use cases that weren’t anticipated and tested by the developers, and a real human eye can help on that part. But as you write automated tests, confidence increases and your need for manual testing will decrease. There are lots of benefits with manual testing but many problems such as the amount of time and resources needed.`}</p>\n    <p>{`It’s again all about trade-offs, what is critical for the end-user and so where you want to put your effort. You want to be confident that when you deploy your changes, your code satisfies the business requirements, and you provide an awesome experience to your Users. And you should use a mix of the different testing strategies to accomplish that goal.`}</p>\n    <p>{`읽어주셔서 감사합니다.`}</p>\n    <hr></hr>\n    <p><strong parentName=\"p\">{`Resources:`}</strong></p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://kentcdodds.com/blog/write-tests\"\n        }}>{`Kent C. Dodds — Write tests. Not too many. Mostly integration.`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://youtu.be/eg_TFYF_cKM\"\n        }}>{`Kent C. Dodds — Confident React`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://youtu.be/pfJdNiDOJ-A\"\n        }}>{`Adrià Fontcuberta — The Pragmatic Front End Tester`}</a></li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import * as React from 'react';\nimport Helmet from 'react-helmet';\n\nimport './global.css';\nimport OctoCat from './octo-cat';\nimport './post.css';\n\n// https://www.gatsbyjs.com/docs/how-to/routing/customizing-components/\n// https://reacttraining.com/blog/gatsby-mdx-blog/\nexport default function Layout({ children, pageContext }) {\n  const { title, description, keywords, url, image, date } = pageContext.frontmatter;\n\n  return (\n    <div id=\"post-body\" className=\"markdown-body dark\">\n      <OctoCat />\n      <Helmet>\n        <title>{title}</title>\n\n        <meta name=\"description\" content={description} />\n        <meta name=\"keywords\" content={keywords} />\n        <meta name=\"author\" content=\"doong-jo\"></meta>\n\n        <meta property=\"og:type\" content=\"website\" />\n        <meta property=\"og:title\" content={title} />\n        <meta property=\"og:site_name\" content={title} />\n        <meta property=\"og:description\" content={description} />\n        <meta property=\"og:image\" content={image} />\n        <meta property=\"og:url\" content={url} />\n\n        <meta name=\"twitter:title\" content={title} />\n        <meta name=\"twitter:description\" content={description} />\n        <meta name=\"twitter:image\" content={image} />\n\n        <link rel=\"canonical\" href={url} />\n        <script src=\"https://utteranc.es/client.js\"\n          repo=\"doong-jo/blog\"\n          issue-term=\"pathname\"\n          theme=\"preferred-color-scheme\"\n          crossorigin=\"anonymous\"\n          async>\n        </script>\n      </Helmet>\n      <time>{date}</time>\n      {children}\n    </div>\n  )\n}\n","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}"],"names":["_frontmatter","layoutProps","MDXLayout","children","pageContext","frontmatter","title","description","keywords","url","image","date","id","className","Helmet","name","content","property","rel","href","src","repo","theme","crossorigin","async","MDXContent","components","props","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","mdxType","parentName","isMDXComponent"],"sourceRoot":""}
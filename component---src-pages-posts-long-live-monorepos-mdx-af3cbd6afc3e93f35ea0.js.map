{"version":3,"file":"component---src-pages-posts-long-live-monorepos-mdx-af3cbd6afc3e93f35ea0.js","mappings":"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","sources":["webpack://blog/./src/components/utterances.js","webpack://blog/./src/components/page-layout.js","webpack://blog/./src/pages/posts/long_live_monorepos.mdx","webpack://blog/./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"],"sourcesContent":["import React, { useEffect, useState, createRef } from \"react\";\n\nconst Utterances = () => {\n  const commentsEl = createRef();\n  const [status, setStatus] = useState(\"pending\");\n\n  useEffect(() => {\n    const scriptEl = document.createElement(\"script\");\n    scriptEl.onload = () => setStatus({ status: \"success\" });\n    scriptEl.onerror = () => setStatus({ status: \"failed\" });\n    scriptEl.async = true;\n    scriptEl.src = \"https://utteranc.es/client.js\";\n    scriptEl.setAttribute(\"repo\", \"doong-jo/blog\");\n    scriptEl.setAttribute(\"issue-term\", \"pathname\");\n    scriptEl.setAttribute(\"theme\", \"preferred-color-scheme\");\n    scriptEl.setAttribute(\"crossorigin\", \"anonymous\");\n    commentsEl.current.appendChild(scriptEl);\n  }, []);\n\n  return (\n    <div className=\"comments-wrapper\">\n      {status === \"failed\" && <p>Error. Please try again.</p>}\n      {status === \"pending\" && <p>Loading script...</p>}\n      <div ref={commentsEl} />\n    </div>\n  );\n};\nexport default Utterances;\n","import * as React from \"react\";\nimport Helmet from \"react-helmet\";\nimport Utterances from \"./utterances\";\n\nimport \"./global.css\";\nimport OctoCat from \"./octo-cat\";\nimport \"./post.css\";\n\n// https://www.gatsbyjs.com/docs/how-to/routing/customizing-components/\n// https://reacttraining.com/blog/gatsby-mdx-blog/\nexport default function Layout({ children, pageContext }) {\n  const { title, description, keywords, url, image, date } =\n    pageContext.frontmatter;\n\n  return (\n    <div id=\"post-body\" className=\"markdown-body dark\">\n      <OctoCat />\n      <Helmet>\n        <title>{title}</title>\n\n        <meta name=\"description\" content={description} />\n        <meta name=\"keywords\" content={keywords} />\n        <meta name=\"author\" content=\"doong-jo\"></meta>\n\n        <meta property=\"og:type\" content=\"website\" />\n        <meta property=\"og:title\" content={title} />\n        <meta property=\"og:site_name\" content={title} />\n        <meta property=\"og:description\" content={description} />\n        <meta property=\"og:image\" content={image} />\n        <meta property=\"og:url\" content={url} />\n\n        <meta name=\"twitter:title\" content={title} />\n        <meta name=\"twitter:description\" content={description} />\n        <meta name=\"twitter:image\" content={image} />\n\n        <link rel=\"canonical\" href={url} />\n      </Helmet>\n      <time>{date}</time>\n      {children}\n      <Utterances />\n    </div>\n  );\n}\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/sungdong.jo/repos/blog/src/components/page-layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1>{`Lerna는 공식적으로 죽었다. 모노레포가 영원하길`}</h1>\n    <blockquote>\n      <p parentName=\"blockquote\">{`원문: `}<a parentName=\"p\" {...{\n          \"href\": \"https://betterprogramming.pub/lerna-is-officially-dead-long-live-monorepos-9853c80a7b0e\"\n        }}>{`https://betterprogramming.pub/lerna-is-officially-dead-long-live-monorepos-9853c80a7b0e`}</a></p>\n    </blockquote>\n    <blockquote>\n      <p parentName=\"blockquote\">{`4가지 도구를 사용하여 JavaScript 모노레포를 효율적으로 관리할 수 있습니다.`}</p>\n    </blockquote>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"https://miro.medium.com/max/1400/1*HOIXYzC17oKEWc5p4gMIwg.png\",\n        \"alt\": \"image1.png\"\n      }}></img></p>\n    <p>{`모노레포 접근 방식은 모든 종속성을 관리하는 좋은 방법입니다. 그리고 이는 몇 년 동안 뜨거운 주제였습니다. 모노레포는 잘 정의된 관계를 통해 개별 프로젝트를 유지할 수 있는 좋은 방법입니다. 즉각적인 이점 중 하나는 `}<inlineCode parentName=\"p\">{`ESLint`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`Prettier`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`TypeScript`}</inlineCode>{` 등과 같은 구성을 서로 다른 프로젝트를 통해 공유하여 일관성을 보장할 수 있다는 점입니다.`}</p>\n    <p><inlineCode parentName=\"p\">{`npm`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`yarn`}</inlineCode>{` 및 `}<inlineCode parentName=\"p\">{`pnpm`}</inlineCode>{`과 같은 도구는 모노레포를 기본적으로 지원합니다. 그러나 몇몇 기능을 지원하려는 의도가 전혀 없기에 이에 따른 결핍이 있습니다. 이것이 `}<inlineCode parentName=\"p\">{`Lerna`}</inlineCode>{`가 활동한 영역이었습니다. 이것의 목표는 패키지를 빌드, 조정 및 게시할 수 있도록 확장성을 향상시키고 만드는 것이었습니다.`}</p>\n    <p>{`Lerna는 최근에 공식적으로 수명이 다했습니다. 비록 메인테이너였던 `}<inlineCode parentName=\"p\">{`@evocateur`}</inlineCode>{`가 그의 불타는 목소리와 프로젝트를 포기하려는 의도를 밝혔지만, 그것은 2020년 4월까지 공식화되지 않았었습니다.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`중요한 참고: 이 프로젝트는 현재 `}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/lerna/lerna/issues/2703\"\n        }}>{`유지 관리되지 않습니다`}</a>{`. 모노레포 관리를 위한 대체 도구 채택을 고려하십시오. — Lerna의 Readme.md입니다.`}</p>\n    </blockquote>\n    <p>{`이 프로젝트는 매일 `}<inlineCode parentName=\"p\">{`130만`}</inlineCode>{` 건 이상의 다운로드가 지속적으로 발생하고 있지만 그 이상으로 넘어가지는 않을 것입니다. 왜 그럴까요? 제작자는 그것을 수정하기보다는 다시 만들기를 열망할 것입니다. 최신 툴링의 성능과 경쟁할 수 없었습니다. 비록 많은 사람들이 여전히 `}<inlineCode parentName=\"p\">{`Lerna`}</inlineCode>{`를 사랑하고 즐긴다고 해도, 이제는 나아가야 할 때입니다.`}</p>\n    <p>{`그렇다면 JavaScript/TypeScript 모노레포 에코시스템을 구축할 때 우리가 선택할 수 있는 것은 무엇일까요? 이 글에서는 가장 인기 있는 도구를 알아보려고 합니다.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`업데이트`}</strong>{`: 이 글이 게시된 후 내용이 뒤바뀌었습니다. Lerna의 제작자가 프로젝트를 `}<strong parentName=\"p\">{`Nrwl`}</strong>{` 🚀🚀에게 넘기기로 결정했습니다. 그들의 로드맵은 여전히 공개되어야 합니다. 지난 한 해 동안 Lerna가 비활성화된 동안 뒤쳐졌습니다.`}</p>\n    </blockquote>\n    <h2>{`Yarn, Npm, and Pnpm`}</h2>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"https://miro.medium.com/max/1400/1*KgmML7r4OsnNdDikiVfiBg.png\",\n        \"alt\": \"image2.png\"\n      }}></img></p>\n    <p>{`앞서 언급했듯이 \"npm\", \"yarn\", \"pnpm\"은 이미 네이티브 모노레포 지원으로 출하되고 있습니다. 그렇다면 \"Lerna\"나 다른 툴이 정말 필요한지 자문해 볼 필요가 있습니다. 당신의 모노레포는 그렇게 복잡합니까?`}</p>\n    <p>{`얀이 선구자였습니다. 2020년 10월 출시 버전 7에서 npm에 도착했습니다. 이 세 가지 사이에는 많은 유사점이 있습니다.`}</p>\n    <p>{`\"pnpm\"에서 작업 공간 구성은 \"pnpm-workspace.yaml\"에 있고 \"yarn\" 및 \"npm\"에서는 루트 패키지에 있습니다.제이슨입니다`}</p>\n    <p>{`'npm' 작업영역 사용 예제입니다.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// /.package.json\n{\n  // ...\n  \"workspaces\": [\"./packages/*\"]\n}\n`}</code></pre>\n    <p>{`테스트와 같은 명령을 실행하려면 npm의 `}<inlineCode parentName=\"p\">{`--workspaces`}</inlineCode>{`와 `}<inlineCode parentName=\"p\">{`pnpm`}</inlineCode>{`의 `}<inlineCode parentName=\"p\">{`-r`}</inlineCode>{` 또는 `}<inlineCode parentName=\"p\">{`recursive`}</inlineCode>{`를 사용할 수 있습니다.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sh\"\n      }}>{`# prune all workspaces\npnpm -r exec -- rm -rf node_modules && rm pnpm-lock.yaml\n# run all tests for all workspaces with scope @doppelmutzi\npnpm recursive run test --filter @doppelmutzi/\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`yarn`}</inlineCode>{`의 한 가지 특징은 `}<inlineCode parentName=\"p\">{`workspace:`}</inlineCode>{` 참조를 동적으로 대체하여 종속성 프로세스를 단순화할 수 있다는 것입니다. 이는 매우 편리합니다.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"dependencies\": {\n    \"star\": \"workspace:*\",\n    \"caret\": \"workspace:^\",\n    \"tilde\": \"workspace:~\",\n    \"range\": \"workspace:^1.2.3\",\n    \"path\": \"workspace:path/to/baz\"\n  }\n}\n`}</code></pre>\n    <p>{`그 세 가지 중에서 어떤 것이 가장 좋습니까? 아마 npm이 빠르게 따라잡고 있지만 좀 더 성숙한 특징을 가지고 있기 때문에 실을 뽑을 것 같습니다. pnpm은 디스크 사용과 같은 다른 이점도 있지만, 이는 실베리를 통해 달성할 수 있습니다.`}</p>\n    <p>{`그 세 가지 중 어떤 것을 언제 사용할까요? 상대적으로 규모가 작은 프로젝트에만 해당됩니다. 왜냐하면 이 프로젝트의 조정 측면이 없기 때문입니다. 복잡한 종속성 그래프 또는 릴리스가 필요한 경우 다른 도구를 선택하는 것이 좋습니다.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}"],"names":["commentsEl","createRef","useState","status","setStatus","useEffect","scriptEl","document","createElement","onload","onerror","async","src","setAttribute","current","appendChild","className","ref","Layout","children","pageContext","frontmatter","title","description","keywords","url","image","date","id","Helmet","name","content","property","rel","href","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent","_objectWithoutPropertiesLoose","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf"],"sourceRoot":""}